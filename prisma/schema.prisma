// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    role          UserRole  @default(USER)
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// The main model for the app
model Test {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name     String  @unique
    isActive Boolean @default(false)

    version Version[]
}

model Version {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    label               String
    numberOfImpressions BigInt @default(0)
    numberOfClicks      BigInt @default(0)

    testId String @db.Uuid
    test   Test   @relation(fields: [testId], references: [id])

    style Style[]

    @@unique([testId, label])
}

model Component {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    domId String @unique

    style Style[]
}

model Style {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    className String @db.Text

    componentId String    @db.Uuid
    component   Component @relation(fields: [componentId], references: [id])

    versionId String  @db.Uuid
    version   Version @relation(fields: [versionId], references: [id])

    @@unique([componentId, versionId])
}
