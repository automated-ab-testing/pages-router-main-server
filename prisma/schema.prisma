// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    username     String   @unique
    passwordHash String
    role         UserRole @default(USER)

    test Test[]
}

model Test {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name     String  @unique
    isActive Boolean @default(false)

    creatorId String @db.Uuid
    creator   User   @relation(fields: [creatorId], references: [id])

    version Version[]
}

model Version {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    label               String
    numberOfImpressions BigInt @default(0)
    numberOfClicks      BigInt @default(0)

    testId String @db.Uuid
    test   Test   @relation(fields: [testId], references: [id])

    style Style[]

    @@unique([testId, label])
}

model Component {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    domId String @unique

    style Style[]
}

model Style {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    className String

    componentId String    @db.Uuid
    component   Component @relation(fields: [componentId], references: [id])

    versionId String  @db.Uuid
    version   Version @relation(fields: [versionId], references: [id])

    @@unique([componentId, versionId])
}

enum UserRole {
    ADMIN
    USER
}
